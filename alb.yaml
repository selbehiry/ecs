AWSTemplateFormatVersion: "2010-09-09"
# Author: "Samir H. Elbehiry"
Description: ECR ALB

Parameters:
  EnvironmentName:
    Default: dev
    Description: Name of the environment 
    Type: String

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Test-aws-lb
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}:SubnetAZ1Public"
        - Fn::ImportValue: !Sub "${EnvironmentName}:SubnetAZ2Public"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}:VPC"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: aws-Test-default
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}:VPC"
      Protocol: HTTP
      Port: 80

Outputs:
  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${EnvironmentName}:TestDomainName"
  
  LoadBalancerListener:
    Description: loadbalancer listener
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub "${EnvironmentName}:TestLoadBalancerListener"
  
  LoadBalancerSecurityGroup:
    Description: Loadbalancer security group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub "${EnvironmentName}:TestLoadBalancerSecurityGroup"
